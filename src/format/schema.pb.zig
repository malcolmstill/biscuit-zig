// Code generated by protoc-gen-zig
///! package biscuit.format.schema
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const Biscuit = struct {
    rootKeyId: ?u32 = null,
    authority: ?SignedBlock = null,
    blocks: ArrayList(SignedBlock),
    proof: ?Proof = null,

    pub const _desc_table = .{
        .rootKeyId = fd(1, .{ .Varint = .Simple }),
        .authority = fd(2, .{ .SubMessage = {} }),
        .blocks = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .proof = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SignedBlock = struct {
    block: ManagedString,
    nextKey: ?PublicKey = null,
    signature: ManagedString,
    externalSignature: ?ExternalSignature = null,

    pub const _desc_table = .{
        .block = fd(1, .String),
        .nextKey = fd(2, .{ .SubMessage = {} }),
        .signature = fd(3, .String),
        .externalSignature = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ExternalSignature = struct {
    signature: ManagedString,
    publicKey: ?PublicKey = null,

    pub const _desc_table = .{
        .signature = fd(1, .String),
        .publicKey = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PublicKey = struct {
    algorithm: Algorithm,
    key: ManagedString,

    pub const _desc_table = .{
        .algorithm = fd(1, .{ .Varint = .Simple }),
        .key = fd(2, .String),
    };

    pub const Algorithm = enum(i32) {
        Ed25519 = 0,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Proof = struct {
    Content: ?Content_union,

    pub const _Content_case = enum {
        nextSecret,
        finalSignature,
    };
    pub const Content_union = union(_Content_case) {
        nextSecret: ManagedString,
        finalSignature: ManagedString,
        pub const _union_desc = .{
            .nextSecret = fd(1, .String),
            .finalSignature = fd(2, .String),
        };
    };

    pub const _desc_table = .{
        .Content = fd(null, .{ .OneOf = Content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Block = struct {
    symbols: ArrayList(ManagedString),
    context: ?ManagedString = null,
    version: ?u32 = null,
    facts_v2: ArrayList(FactV2),
    rules_v2: ArrayList(RuleV2),
    checks_v2: ArrayList(CheckV2),
    scope: ArrayList(Scope),
    publicKeys: ArrayList(PublicKey),

    pub const _desc_table = .{
        .symbols = fd(1, .{ .List = .String }),
        .context = fd(2, .String),
        .version = fd(3, .{ .Varint = .Simple }),
        .facts_v2 = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .rules_v2 = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .checks_v2 = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .scope = fd(7, .{ .List = .{ .SubMessage = {} } }),
        .publicKeys = fd(8, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Scope = struct {
    Content: ?Content_union,

    pub const _Content_case = enum {
        scopeType,
        publicKey,
    };
    pub const Content_union = union(_Content_case) {
        scopeType: ScopeType,
        publicKey: i64,
        pub const _union_desc = .{
            .scopeType = fd(1, .{ .Varint = .Simple }),
            .publicKey = fd(2, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .Content = fd(null, .{ .OneOf = Content_union }),
    };

    pub const ScopeType = enum(i32) {
        Authority = 0,
        Previous = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FactV2 = struct {
    predicate: ?PredicateV2 = null,

    pub const _desc_table = .{
        .predicate = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RuleV2 = struct {
    head: ?PredicateV2 = null,
    body: ArrayList(PredicateV2),
    expressions: ArrayList(ExpressionV2),
    scope: ArrayList(Scope),

    pub const _desc_table = .{
        .head = fd(1, .{ .SubMessage = {} }),
        .body = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .expressions = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .scope = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CheckV2 = struct {
    queries: ArrayList(RuleV2),
    kind: ?Kind = null,

    pub const _desc_table = .{
        .queries = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .kind = fd(2, .{ .Varint = .Simple }),
    };

    pub const Kind = enum(i32) {
        One = 0,
        All = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PredicateV2 = struct {
    name: u64,
    terms: ArrayList(TermV2),

    pub const _desc_table = .{
        .name = fd(1, .{ .Varint = .Simple }),
        .terms = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TermV2 = struct {
    Content: ?Content_union,

    pub const _Content_case = enum {
        variable,
        integer,
        string,
        date,
        bytes,
        bool,
        set,
    };
    pub const Content_union = union(_Content_case) {
        variable: u32,
        integer: i64,
        string: u64,
        date: u64,
        bytes: ManagedString,
        bool: bool,
        set: TermSet,
        pub const _union_desc = .{
            .variable = fd(1, .{ .Varint = .Simple }),
            .integer = fd(2, .{ .Varint = .Simple }),
            .string = fd(3, .{ .Varint = .Simple }),
            .date = fd(4, .{ .Varint = .Simple }),
            .bytes = fd(5, .String),
            .bool = fd(6, .{ .Varint = .Simple }),
            .set = fd(7, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .Content = fd(null, .{ .OneOf = Content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TermSet = struct {
    set: ArrayList(TermV2),

    pub const _desc_table = .{
        .set = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ExpressionV2 = struct {
    ops: ArrayList(Op),

    pub const _desc_table = .{
        .ops = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Op = struct {
    Content: ?Content_union,

    pub const _Content_case = enum {
        value,
        unary,
        Binary,
    };
    pub const Content_union = union(_Content_case) {
        value: TermV2,
        unary: OpUnary,
        Binary: OpBinary,
        pub const _union_desc = .{
            .value = fd(1, .{ .SubMessage = {} }),
            .unary = fd(2, .{ .SubMessage = {} }),
            .Binary = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .Content = fd(null, .{ .OneOf = Content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OpUnary = struct {
    kind: Kind,

    pub const _desc_table = .{
        .kind = fd(1, .{ .Varint = .Simple }),
    };

    pub const Kind = enum(i32) {
        Negate = 0,
        Parens = 1,
        Length = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OpBinary = struct {
    kind: Kind,

    pub const _desc_table = .{
        .kind = fd(1, .{ .Varint = .Simple }),
    };

    pub const Kind = enum(i32) {
        LessThan = 0,
        GreaterThan = 1,
        LessOrEqual = 2,
        GreaterOrEqual = 3,
        Equal = 4,
        Contains = 5,
        Prefix = 6,
        Suffix = 7,
        Regex = 8,
        Add = 9,
        Sub = 10,
        Mul = 11,
        Div = 12,
        And = 13,
        Or = 14,
        Intersection = 15,
        Union = 16,
        BitwiseAnd = 17,
        BitwiseOr = 18,
        BitwiseXor = 19,
        NotEqual = 20,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Policy = struct {
    queries: ArrayList(RuleV2),
    kind: Kind,

    pub const _desc_table = .{
        .queries = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .kind = fd(2, .{ .Varint = .Simple }),
    };

    pub const Kind = enum(i32) {
        Allow = 0,
        Deny = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AuthorizerPolicies = struct {
    symbols: ArrayList(ManagedString),
    version: ?u32 = null,
    facts: ArrayList(FactV2),
    rules: ArrayList(RuleV2),
    checks: ArrayList(CheckV2),
    policies: ArrayList(Policy),

    pub const _desc_table = .{
        .symbols = fd(1, .{ .List = .String }),
        .version = fd(2, .{ .Varint = .Simple }),
        .facts = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .rules = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .checks = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .policies = fd(6, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ThirdPartyBlockRequest = struct {
    previousKey: ?PublicKey = null,
    publicKeys: ArrayList(PublicKey),

    pub const _desc_table = .{
        .previousKey = fd(1, .{ .SubMessage = {} }),
        .publicKeys = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ThirdPartyBlockContents = struct {
    payload: ManagedString,
    externalSignature: ?ExternalSignature = null,

    pub const _desc_table = .{
        .payload = fd(1, .String),
        .externalSignature = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AuthorizerSnapshot = struct {
    limits: ?RunLimits = null,
    executionTime: u64,
    world: ?AuthorizerWorld = null,

    pub const _desc_table = .{
        .limits = fd(1, .{ .SubMessage = {} }),
        .executionTime = fd(2, .{ .Varint = .Simple }),
        .world = fd(3, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RunLimits = struct {
    maxFacts: u64,
    maxIterations: u64,
    maxTime: u64,

    pub const _desc_table = .{
        .maxFacts = fd(1, .{ .Varint = .Simple }),
        .maxIterations = fd(2, .{ .Varint = .Simple }),
        .maxTime = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AuthorizerWorld = struct {
    version: ?u32 = null,
    symbols: ArrayList(ManagedString),
    publicKeys: ArrayList(PublicKey),
    blocks: ArrayList(SnapshotBlock),
    authorizerBlock: ?SnapshotBlock = null,
    authorizerPolicies: ArrayList(Policy),
    generatedFacts: ArrayList(GeneratedFacts),
    iterations: u64,

    pub const _desc_table = .{
        .version = fd(1, .{ .Varint = .Simple }),
        .symbols = fd(2, .{ .List = .String }),
        .publicKeys = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .blocks = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .authorizerBlock = fd(5, .{ .SubMessage = {} }),
        .authorizerPolicies = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .generatedFacts = fd(7, .{ .List = .{ .SubMessage = {} } }),
        .iterations = fd(8, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Origin = struct {
    Content: ?Content_union,

    pub const _Content_case = enum {
        authorizer,
        origin,
    };
    pub const Content_union = union(_Content_case) {
        authorizer: Empty,
        origin: u32,
        pub const _union_desc = .{
            .authorizer = fd(1, .{ .SubMessage = {} }),
            .origin = fd(2, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .Content = fd(null, .{ .OneOf = Content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Empty = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GeneratedFacts = struct {
    origins: ArrayList(Origin),
    facts: ArrayList(FactV2),

    pub const _desc_table = .{
        .origins = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .facts = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SnapshotBlock = struct {
    context: ?ManagedString = null,
    version: ?u32 = null,
    facts_v2: ArrayList(FactV2),
    rules_v2: ArrayList(RuleV2),
    checks_v2: ArrayList(CheckV2),
    scope: ArrayList(Scope),
    externalKey: ?PublicKey = null,

    pub const _desc_table = .{
        .context = fd(1, .String),
        .version = fd(2, .{ .Varint = .Simple }),
        .facts_v2 = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .rules_v2 = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .checks_v2 = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .scope = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .externalKey = fd(7, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
